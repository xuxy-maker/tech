{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "# NumPy的广播机制/SciPy稀疏矩阵处理\n",
    "\n",
    "\n",
    "\n",
    "## NumPy的广播机制\n",
    "\n",
    "\n",
    "\n",
    "### 什么是广播机制\n",
    "\n",
    "\n",
    "　　广播机制是Numpy里一种向量化数组操作方法。\n",
    "  \n",
    "　　Numpy的通用函数（Universal functions）中要求输入的两个数组shape是一致的，当数组的shape不相等时，则会使用广播机制，调整数组使得两个shape一致，满足规则，则可以运算，否则就出错。\n",
    "  \n",
    "  \n",
    "### 广播机制中的规则\n",
    "\n",
    "  \t如果数组的秩不同，将秩较小的数组进行扩展，直到两个数组的尺寸长度都一样。\n",
    "\t如果两个数组在某个维度上的长度是相同的，或者其中一个数组在该维度上的长度为1，那么我们就说这两个数组在该维度上是相容的。\n",
    "\t如果两个数组在所有维度上都是相容的，它们就能使用广播。\n",
    "\t广播之后，两个数组的尺寸将和较大的数组尺寸一样。\n",
    "\t在任何一个维度上，如果一个数组的长度为1，另一个数组长度大于1，那么在该维度上，就像是对第一个数组进行了复制。\n",
    "    \n",
    "  \n",
    "### NumPy中数组的算术运算\n",
    "\n",
    "<br>\n",
    " 当a是一个数组时， a + 1 将为a的所有元素加1。\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 1, 2, 3, 4])"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "a = np.arange(5)\n",
    "b = np.arange(9).reshape(3,3)\n",
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0, 1, 2],\n",
       "       [3, 4, 5],\n",
       "       [6, 7, 8]])"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 2, 3, 4, 5])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a + 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0. , 0.5, 1. , 1.5, 2. ])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a / 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-2, -1,  0],\n",
       "       [ 1,  2,  3],\n",
       "       [ 4,  5,  6]])"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    " b -2 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0. , 0.5, 1. ],\n",
       "       [1.5, 2. , 2.5],\n",
       "       [3. , 3.5, 4. ]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b / 2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "  乘法也是如此。这与向量和矩阵的“标量积”相同。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0,  3,  6,  9, 12])"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a * 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0,  4,  8],\n",
       "       [12, 16, 20],\n",
       "       [24, 28, 32]])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b * 4"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 取每个元素的exp\n",
    "<br>\n",
    "\n",
    "　　NumPy不仅可以广播算术运算，还可以广播某些内置函数。\n",
    "\n",
    "　　例如， numpy.exp（指数函数）应用于数组，则将对每个元素采用exp。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 1.        ,  2.71828183,  7.3890561 , 20.08553692, 54.59815003])"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.exp(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1.00000000e+00, 2.71828183e+00, 7.38905610e+00],\n",
       "       [2.00855369e+01, 5.45981500e+01, 1.48413159e+02],\n",
       "       [4.03428793e+02, 1.09663316e+03, 2.98095799e+03]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.exp(b)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 什么是通用函数\n",
    "<br>\n",
    "　　并非所有功能都可以这种方式进行操作。可广播功能称为“通用函数”，或称为ufunc。 \n",
    "\n",
    "　　如，当显示numpy.exp时，显示ufunc，如下所示。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<ufunc 'exp'>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.exp"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "可以看到numpy.exp是通用函数"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 用二进制运算符广播\n",
    "<br>\n",
    "通过使用二进制运算符，广播也可以用于两个阵列。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((3, 4), (4,))"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a = np.arange(12).reshape(3,4)\n",
    "b = np.arange(0,400,100)\n",
    "a.shape, b.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[  0, 101, 202, 303],\n",
       "       [  4, 105, 206, 307],\n",
       "       [  8, 109, 210, 311]])"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a + b"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "当一维数组的大小与二维数组中的列数（形状的第二值）匹配时，可以利用二元运算符对二维数组和一维数组进行广播。此时的计算等同于以下内容。\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$$\n",
    "\\begin{bmatrix}\n",
    "a_{00} + b_{0} &a_{01} + b_{1} & a_{03} + b_{3}  \\\\\\ \n",
    "a_{10} + b_{0} &a_{11} + b_{1} & a_{13} + b_{3}  \\\\\\\n",
    "a_{20} + b_{0} &a_{21} + b_{1} & a_{23} + b_{3} \n",
    "\\end{bmatrix}\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "当执行其他二进制运算时，情况相同，并且在上式中将加法运算替换为其他运算。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[   0,  100,  400,  900],\n",
       "       [   0,  500, 1200, 2100],\n",
       "       [   0,  900, 2000, 3300]])"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a * b"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 形状完全相同的阵列之间的二元运算\n",
    "<br>\n",
    "　　形状完全相同的数组之间的二进制运算与每个元素的运算匹配。至于加法，恰好是矩阵和向量的加法一致。\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "c = np.arange(0,1200,100).reshape(3,4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[   0,  101,  202,  303],\n",
       "       [ 404,  505,  606,  707],\n",
       "       [ 808,  909, 1010, 1111]])"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a  + c"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[    0,   100,   400,   900],\n",
       "       [ 1600,  2500,  3600,  4900],\n",
       "       [ 6400,  8100, 10000, 12100]])"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a * c"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 减少广播的计算时间\n",
    "\n",
    "<br>\n",
    "\n",
    "　　上面，简单地说明了广播，重点介绍了机器学习所需的最多二维的数组（即，数学上的向量和矩阵）。通常，广播规则是为多维数组（数学上为张量）定义的。如果想了解一般广播规则，请参考官方的NumPy文档。\n",
    "\n",
    "　　当将数组视为“向量”或“矩阵”时，从数学的角度来看，广播是很少使用的计算，但当将其视为“表”时，将其视为汇总计算，可能更容易理解。\n",
    "\n",
    "　　另一方面，大量使用广播，会使代码变得难解，但在Python中，使用for循环进行的统计计算，通常程序会变慢，充分利用广播通常可以节省计算时间。\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 如何在SciPy中使用稀疏矩阵\n",
    "\n",
    "\n",
    "### 什么是稀疏矩阵\n",
    "<br>\n",
    "\n",
    "　　稀疏矩阵是指其中大多数元素为零的矩阵，它是一种通过仅存储非零元素并执行计算来节省内存和计算速度的机制。不是稀疏矩阵的常见矩阵有时称为密集矩阵。\n",
    "\n",
    "　　稀疏矩阵可用于机器学习的许多领域。稀疏矩阵特别有效的示例是DVD租赁站点的推荐系统。假定用户对电影的评级值(rating)从1到5。\n",
    "\n",
    "　　例如， 用户U1对电影M1评为2，M2则为5。用户U2对电影M1评为2，对M3称为1，…… 参见下表。 DVD租赁站点有许多用户和DVD，一个用户看到的内容只是一小部分，但是该评估值的数据是 用户数 × DVD 数的巨大矩阵。但是，大多数元素都是缺失值，缺失值用0表示，则使用稀疏矩阵能有效地与之对应。\n",
    "\n",
    "|ユーザ/映画  | M1 | M2 | M3 | M4 | M5 |\n",
    "| ---------- | -- | -- | -- | -- | -- |\n",
    "| U1 | 1  | 2  | -   | -   | -   |\n",
    "| U2 |  -  | 2 | 1  | -   | -   |\n",
    "| U3 | -   |  -  | 3 | 1 | 2 |\n",
    "\n",
    "\n",
    "\n",
    "　　SciPy具有许多表示稀疏矩阵的类，在此，具体地看一下经常利用的lil_matrix、csr_matrix、csc_matrix。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### lil_matrix类\n",
    "<br>\n",
    "\n",
    "　　下面的代码所示调用toarray方法会将稀疏矩阵转换为密集矩阵，测试代码检查操作很方便。但通常使用稀疏矩阵尺寸很大，真实数据中使用toarray方法不多。\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "from scipy import sparse\n",
    "a = sparse.lil_matrix((5,5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<5x5 sparse matrix of type '<class 'numpy.float64'>'\n",
       "\twith 3 stored elements in LInked List format>"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a[0,0] = 1\n",
    "a[1,2] = 2\n",
    "a[3,4] = 3\n",
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1., 0., 0., 0., 0.],\n",
       "       [0., 0., 2., 0., 0.],\n",
       "       [0., 0., 0., 0., 0.],\n",
       "       [0., 0., 0., 0., 3.],\n",
       "       [0., 0., 0., 0., 0.]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a.toarray()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "使用了il_matrix，用于最初的数据存储很方便。例如，可以以a[i,j]=v」的形式设定 「i,j」成分的值。\n",
    "\n",
    "lil_matrix对于计算矩阵效率不高，因此通常在将其转换为csr_matrix或csc_matrix之后使用。\n",
    "\n",
    "### 使用tocsr方法将lil_matrix作为csr_matrix计算\n",
    "<br>\n",
    "\n",
    "在此示例中，由于很小，不在乎计算速度，尝试使用tocsr方法将a转换为csr_matrix类型。\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1., 0., 0., 0., 0.],\n",
       "       [0., 0., 2., 0., 0.],\n",
       "       [0., 0., 0., 0., 0.],\n",
       "       [0., 0., 0., 0., 3.],\n",
       "       [0., 0., 0., 0., 0.]])"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a.toarray()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 1, 2, 3, 4])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "v = np.arange(5)\n",
    "v"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0.,  4.,  0., 12.,  0.])"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a.dot(v)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0,  1,  2],\n",
       "       [ 3,  4,  5],\n",
       "       [ 6,  7,  8],\n",
       "       [ 9, 10, 11],\n",
       "       [12, 13, 14]])"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = np.arange(15).reshape(5,3)\n",
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.,  1.,  2.],\n",
       "       [12., 14., 16.],\n",
       "       [ 0.,  0.,  0.],\n",
       "       [36., 39., 42.],\n",
       "       [ 0.,  0.,  0.]])"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a.dot(x)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "使用dot方法可以计算稀疏矩阵的矩阵乘积。首先，计算稀疏矩阵和密集矩阵的乘积。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0., 0., 0., 0., 4.],\n",
       "       [0., 0., 0., 0., 0.],\n",
       "       [0., 0., 0., 5., 0.],\n",
       "       [0., 0., 0., 0., 0.],\n",
       "       [0., 6., 0., 0., 0.]])"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b = sparse.lil_matrix((5,5))\n",
    "b[0,4] = 4\n",
    "b[2,3] = 5\n",
    "b[4,1] = 6\n",
    "b = b.tocsr()\n",
    "b.toarray()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.,  0.,  0.,  0.,  4.],\n",
       "       [ 0.,  0.,  0., 10.,  0.],\n",
       "       [ 0.,  0.,  0.,  0.,  0.],\n",
       "       [ 0., 18.,  0.,  0.,  0.],\n",
       "       [ 0.,  0.,  0.,  0.,  0.]])"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a.dot(b).toarray()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "　在稀疏矩阵类型的情况下，与普通数组不同，还可以使用乘法运算符（*）计算矩阵乘积。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.,  0.,  0.,  0.,  4.],\n",
       "       [ 0.,  0.,  0., 10.,  0.],\n",
       "       [ 0.,  0.,  0.,  0.,  0.],\n",
       "       [ 0., 18.,  0.,  0.,  0.],\n",
       "       [ 0.,  0.,  0.,  0.,  0.]])"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(a*b).toarray()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### csr_matrix和csc_matrix的差异\n",
    "<br>\n",
    "　　上面使用csr_matrix类型进行计算，即使使用csc_matrix，速度也没有什么差异。csr_matrix和csc_matrix之间的区别是数据存储格式。\n",
    "\n",
    "　　在csr_matrix中，非零元素数据在行方向上存储，在csc_matrix中在列方向上存储。检索指定的行（列）过程时，使用csr_matrix，获取指定的行快，而使用csc_matrix，获取指定的列快。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 使用getrow和getcol方法分别检索指定的行和列<br>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0., 0., 2., 0., 0.]])"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a.getrow(1).toarray()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.],\n",
       "       [2.],\n",
       "       [0.],\n",
       "       [0.],\n",
       "       [0.]])"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a.getcol(2).toarray()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 稀疏列型的dot方法\n",
    "<br>\n",
    "\n",
    "　可能要使用稀疏向量（大多数元素为0的向量）而不是稀疏矩阵，但是没有显式类型来表示稀疏向量，因此行或列的数量为1用稀疏矩阵代替。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 7.],\n",
       "       [16.],\n",
       "       [ 0.],\n",
       "       [ 0.],\n",
       "       [ 0.]])"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "u = sparse.lil_matrix((5,1))\n",
    "u[0,0] = 7\n",
    "u[2,0] = 8\n",
    "u = u.tocsr()\n",
    "a.dot(u).toarray()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "　　如此，稀疏矩阵类型（csr_matrix，csc_matrix）dot方法可以将稠密矩阵/稀疏矩阵（向量）作为参数，并根据数据类型通过最佳算法进行计算。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### NumPy的dot参数不应该是稀疏矩阵\n",
    "\n",
    "　在稠密矩阵位于左侧的情况下，例如稠密矩阵×稀疏矩阵，需要注意。在使用numpy.dot解释了稠密矩阵的乘积，但是当参数是稀疏矩阵时，这种方法不起作用。\n",
    "\n",
    "　另外，NumPy数组类型也具有dot方法，但是当其参数为稀疏矩阵时不起作用。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([<5x5 sparse matrix of type '<class 'numpy.float64'>'\n",
       "\twith 0 stored elements in LInked List format>,\n",
       "       <5x5 sparse matrix of type '<class 'numpy.float64'>'\n",
       "\twith 3 stored elements in LInked List format>,\n",
       "       <5x5 sparse matrix of type '<class 'numpy.float64'>'\n",
       "\twith 3 stored elements in LInked List format>,\n",
       "       <5x5 sparse matrix of type '<class 'numpy.float64'>'\n",
       "\twith 3 stored elements in LInked List format>,\n",
       "       <5x5 sparse matrix of type '<class 'numpy.float64'>'\n",
       "\twith 3 stored elements in LInked List format>], dtype=object)"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.dot(v,a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0., 0., 2., 0., 9.])"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "v * a"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "　　因为稀疏矩阵不被假定为NumPy点的参数。在这种情况下，使用乘法运算符。\n",
    "\n",
    "\n",
    "注意！ 乘法运算符的内部运算 这种乘法运算符的乘法是通过稀疏矩阵类型（在此情况下为变量a）称为__rmul__的特殊方法定义的。通常，通过在类定义中定义__rmul__方法，可以为该类从左侧定义乘法（即，从类右侧到其他对象的乘法）。如果尝试使用点方法而不使用乘法运算符进行等效处理，则等效转换vA =(ATvT)T将按以下方式使用。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0., 0., 2., 0., 9.])"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a.T.dot(v).T"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "在这里，T是表示转置矩阵的属性，无需区分v的垂直和水平方向（即，无需转置）。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 处理稀疏矩阵时的注意事项\n",
    "<br>\n",
    "　　综上所述，稀疏矩阵的处理，有必要注意以下几点。\n",
    "\n",
    "　　Lil_matrix易于用于数据存储。但是，最好转换为csr_matrix或csc_matrix进行计算，然后在有必要获取指定的行时使用csr_matrix，并在有必要获取指定的列时使用csc_matrix。使用稀疏dot方法或乘法运算符（*）。从稀疏矩阵的左边乘一个稠密矩阵时要特别注意。"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
