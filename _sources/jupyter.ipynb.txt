{
 "cells": [
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Jupyter Notebook\n",
    "=========================\n",
    "\n",
    "\n",
    "\n",
    "这里介绍「Jupyter Notebook」的各种基本操作。\n",
    "\n",
    "\n",
    "安装Jupyter Notebook\n",
    "---------------------------\n",
    "\n",
    "\n",
    "　Jupyter的安装，因具体环境而异，有pip安装，Anaconda安装等等方法，不作详细说明。\n",
    "\n",
    "比如在Anaconda中，顺便把sphinx及nbsphinx一起安装了。使用ipynb文件制作文档时，非常方便。\n",
    "大致安装以下工具。\n",
    "\n",
    ".. code-block:: shell\n",
    "\n",
    "    $  conda install -c conda-forge sphinx\n",
    "    $  conda install -c conda-forge pandoc\n",
    "    $  conda install -c conda-forge nbsphinx\n",
    "\n",
    "    $  conda install -c conda-forge jupyter\n",
    "    $  conda install -c conda-forge ipython\n",
    "    $  conda install -c conda-forge ipykernel\n",
    "\n",
    "\n",
    "\n",
    "云环境上还有一些可以免费使用的，如：\n",
    "\n",
    "\n",
    " | `Try Jupyter! <https://try.jupyter.org/>`_\n",
    "\n",
    " | `SageMathCloud <https://cloud.sagemath.com/>`_\n",
    "\n",
    "\n",
    "|\n",
    "\n",
    "Jupyter Notebook基本使用\n",
    "-------------------------------\n",
    "|\n",
    "\n",
    "\n",
    "启动\n",
    "^^^^^^^^^\n",
    "\n",
    "这是我本人环境下的运行jupyter的情形，比较麻烦，涉及docker中volume挂接等等。\n",
    "\n",
    "|\n",
    "\n",
    ".. code-block:: shell\n",
    "\n",
    "   #启动container\n",
    "   $ docker run -it -p 8888:8888 -v /opt/notebooks:/opt/notebooks  ml-env /bin/bash\n",
    "   #启动jupyter\n",
    "   # jupyter notebook --notebook-dir=/opt/notebooks --ip='0.0.0.0' --no-browser --allow-root\n",
    "\n",
    "\n",
    "|\n",
    "\n",
    "通常，如下启动::\n",
    "\n",
    "    $ jupyter notebook\n",
    "\n",
    "\n",
    "指定端口启动::\n",
    "\n",
    "   $ jupyter notebook --port 9000\n",
    "\n",
    "\n",
    "正常启动后，就可以通过浏览器访问使用了。\n",
    "\n",
    "\n",
    ".. image:: img/news013_010.jpg\n",
    "\n",
    "\n",
    "\n",
    "新建一个notebook\n",
    "^^^^^^^^^^^^^^^^^^\n",
    "\n",
    "\n",
    "打开Notebook时，如下所示从右侧的New按钮中选择Python3。\n",
    "\n",
    "\n",
    ".. image:: img/news013_020.jpg\n",
    "\n"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "输入并运行代码\n",
    "^^^^^^^^^^^^^^^^^\n",
    "\n",
    "\n",
    "输入代码。并按Shift + Enter键，执行代码"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a = 3\n",
    "b = 4\n",
    "a + b\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "　　显示单元格中最后一行的结果。\n",
    "\n",
    "　　执行后，将创建一个新的单元格。在其中输入新代码，按Shift + Enter来连续执行。\n",
    "可以单击已执行的单元格来编辑内容，重新执行。\n",
    "\n",
    "　　此外，使用Ctrl + Enter 键也可以执行单元格，但不会创建新的单元格。\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0, 1, 2],\n",
       "       [3, 4, 5],\n",
       "       [6, 7, 8]])"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "a = np.arange(9).reshape(3,3)\n",
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[10, 11, 12],\n",
       "       [13, 14, 15],\n",
       "       [16, 17, 18]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b = np.arange(10,19).reshape(3,3)\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 45,  48,  51],\n",
       "       [162, 174, 186],\n",
       "       [279, 300, 321]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.dot(a,b)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "在一个notebook中，遵照解释型语言的原则，读入的数据和变量一直有效。"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "\n",
    "终止Jupyter Notebook\n",
    "^^^^^^^^^^^^^^^^^^^^^^^^^\n",
    "\n",
    "\n",
    "在console上按　Ctrl + C 键，显示信息后。按y键。 ::\n",
    "\n",
    "   he Jupyter Notebook is running at: http://localhost:8888/\n",
    "   Shutdown this notebook server (y/[n])?\n",
    "\n",
    "\n",
    "\n",
    "中断现代码的执行\n",
    "^^^^^^^^^^^^^^^^^^^^^^^^^\n",
    "\n",
    "\n",
    "　在执行繁重处理的途中，可以中途停止。 在Kernel菜单中选择Interupt中断。 restat，是重启程序。\n",
    "\n",
    ".. image:: img/news013_060.jpg\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "编辑单元格\n",
    "^^^^^^^^^^^^^^^^^^^^^^^^^\n",
    "\n",
    "\n",
    "　　使用Edit菜单编辑单元格。特别是「Delete Cells」、「Split Cell」、「Merge Cell Above」（上）、「Merge Cell Below」（下）使用起来很方便。\n",
    "\n",
    "\n",
    ".. image:: img/news013_070.jpg\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Pandas的DataFrame\n",
    "^^^^^^^^^^^^^^^^^^^^^^^^\n",
    "\n",
    "　　通常变量的评估值以文本格式显示，但Pandas的DataFrame以表格格式显示。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>a</th>\n",
       "      <th>b</th>\n",
       "      <th>c</th>\n",
       "      <th>d</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8</td>\n",
       "      <td>9</td>\n",
       "      <td>10</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>12</td>\n",
       "      <td>13</td>\n",
       "      <td>14</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>16</td>\n",
       "      <td>17</td>\n",
       "      <td>18</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    a   b   c   d\n",
       "0   0   1   2   3\n",
       "1   4   5   6   7\n",
       "2   8   9  10  11\n",
       "3  12  13  14  15\n",
       "4  16  17  18  19"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "df = pd.DataFrame(np.arange(20).reshape(5,4), columns=list(\"abcd\"))\n",
    "df\n"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "\n",
    "matplotlib绘图\n",
    "^^^^^^^^^^^^^^^^^^^^^^^^\n",
    "\n",
    "　在Notebook中绘制Matplotlib图形，需指定「%matplotlib inline」。\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7ff842fd5f60>]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "x = np.linspace(-5,5,300)\n",
    "y = np.sin(x)\n",
    "plt.plot(x,y)"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "其他魔术命令\n",
    "^^^^^^^^^^^^^^^^\n",
    "\n",
    "　以“％”开头的命令称为魔术命令。如％timeit。测代码的执行时间。\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "38.9 ms ± 1.11 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit np.arange(10000000).sum()"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "　还有其他魔术命令，有关信息，在单元格中键入「%magic」，然后按Shift + Enter，获取详细的文档。\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "%magic"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "函数，方法，类等的帮助信息\n",
    "^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
    "\n",
    "\n",
    "　获得有关函数，方法，类等的帮助信息，在函数名称，方法名和类名之后添加？，然后按 Shift + Enter键。\n",
    "\n",
    "　使用??，则显示相应的源代码。\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "np.linspace?"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    ".. image:: img/news013_120.jpg"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "np.linspace??"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    ".. image:: img/news013_130.jpg"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "\n",
    "\n",
    "Markdown格式或其它格式输入文本\n",
    "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
    "\n",
    "\n",
    "\n",
    "　　除了代码，还可以使用多种格式的文本。在文稿和执行代码混在的文档中使用，非常方便。从右上方的下拉菜单中选择Markdown菜单，写Markdown文本。\n",
    "\n",
    "\n",
    ".. image:: img/news013_140.jpg\n",
    "\n",
    "\n",
    "创建Markdown文档\n",
    "\n",
    "，以Markdown格式输入文本，然后按 Shift + Enter键设置文本格式。\n",
    "\n",
    ".. image:: img/news013_150.jpg\n",
    "\n",
    "Markdown文本示例（格式化之前）\n",
    "\n",
    ".. image:: img/news013_160.jpg\n",
    "\n",
    "Markdown文本示例（格式化后）\n",
    "\n",
    "\n",
    "可以将以这种方式创建的页面导出为HTML形式。使用起来很方便。\n",
    "\n",
    "另外，选择Raw NBConvert Format后，还可以指定rest，html等格式。这是一个非常方便的功能。\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "celltoolbar": "Raw Cell Format",
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
